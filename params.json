{"name":"Play2-plugin-httpauthentication","body":"HTTP Authentication\r\n===================\r\n\r\nThis Play 2 plugin provide helpers for HTTP Authentication.\r\n\r\nBasic Authentication\r\n--------------------\r\n\r\nThere are 2 ways to use Basic Authentication:\r\n* Providing the list of username->password pairs (both in plain-text).\r\n* Providing an check function which will be called with the given informations.\r\n\r\nDigest Authentication\r\n--------------------\r\n\r\nThe Digest Authentication allows to check if 2 passwords are equals, but it need the plain-text password (by design).\r\nThus this helper can only be called with a username->password list.\r\n\r\nExample\r\n-------\r\n\r\n~~~scala\r\nimport play.modules.httpauthentication.HTTPAuthentication\r\n\r\nobject BackOffice extends Controller with HTTPAuthentication {\r\n\r\n  /**\r\n   * Invokes the authentication procedure.\r\n   *\r\n   * It provides the valid user object to the given action, instead of a Map.\r\n   */\r\n  def Authenticate(action: User => Result)(implicit request: Request[Any]): Result = {\r\n    BasicAuthentication(Map(\"realm\" -> \"Back Office\")){ auth =>\r\n      User.findAndCheck(auth(\"username\"), auth(\"password\"))\r\n    }(action)\r\n  }\r\n\r\n  def index = Action { implicit request =>\r\n    Authenticate { implicit user =>\r\n      Ok(html.admin.index())\r\n    }\r\n  }\r\n\r\n  def logs = Action { implicit request =>\r\n    Authenticate { implicit user =>\r\n      Ok(html.admin.logs())\r\n    }\r\n  }\r\n\r\n}\r\n~~~\r\n","tagline":"Basic and Digest HTTP Authentication helpers for Play 2","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}